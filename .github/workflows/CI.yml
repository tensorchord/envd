name: CI

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - '**.go'
      - 'Makefile'
  pull_request:
    types: [review_requested, ready_for_review]
    paths:
      - '.github/workflows/**'
      - '**.go'
      - 'Makefile'
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/checkout@v3
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Check Go modules
        run: |
          go mod tidy && git add go.* &&
          git diff --cached --exit-code || (echo 'Please run "go mod tidy" to sync Go modules' && exit 1);
      - name: Verify gofmt
        run: |
          make fmt && git add pkg cmd &&
          git diff --cached --exit-code || (echo 'Please run "make fmt" to verify gofmt' && exit 1);
      - name: Verify govet
        run: |
          make vet && git add pkg cmd &&
          git diff --cached --exit-code || (echo 'Please run "make vet" to verify govet' && exit 1);
      - name: Add license
        run: |
          make addlicense && git add pkg cmd &&
          git diff --cached --exit-code || (echo 'Please run "make addlicense" to verify govet' && exit 1);
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.46.2
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.setup.outputs.os }}
    steps:
      - name: setup
        id: setup
        run: |
          if ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}; then
            os='["ubuntu-latest","macos-latest"]'
          else
            os='["ubuntu-latest"]'
          fi
          list=$(echo ${os} | jq -c)
          echo "::set-output name=os::${list}"
  test:
    name: test
    needs: setup
    strategy:
      matrix:
        os: ${{ fromJson(needs.setup.outputs.os) }}
    runs-on: ${{ matrix.os }}
    env:
      GOPATH: ${{ github.workspace }}/go
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/tensorchord/envd
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/tensorchord/envd
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Verify mockgen
        run: |
          make generate && git add pkg &&
          git diff --cached --exit-code || (echo 'Please run "make generate" to verify generate' && exit 1);
      - name: Test
        run: make test
      # - name: send coverage
      #   uses: shogo82148/actions-goveralls@v1
      #   with:
      #     path-to-profile: coverage.out
      #     working-directory: src/github.com/tensorchord/envd
      #     flag-name: unit-test
      #     parallel: true
  build:
    name: build
    needs: setup
    strategy:
      matrix:
        os: ${{ fromJson(needs.setup.outputs.os) }}
    runs-on: ${{ matrix.os }}
    env:
      GOPATH: ${{ github.workspace }}/go
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/tensorchord/envd
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/tensorchord/envd
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Build
        run: make
